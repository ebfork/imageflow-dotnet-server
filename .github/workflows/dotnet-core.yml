name: .NET Core

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
    
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-20.04
            os: ubuntu-20.04
            uploader: true
            
          - name: osx_11.0-x86_64
            os: macos-11.0
            
          - name: win-x86_64
            os: windows-latest

    runs-on: ${{matrix.os}}
    steps:

      
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        
    - uses: nowsprinting/check-version-format-action@v3
      id: version
      with:
        prefix: 'v'

    - name: Upload planned for Nuget.org?
      run: echo "This runner will upload to Nuget.org if tests pass"
      if: matrix.uploader && github.event_name == 'release' &&  steps.version.outputs.is_valid == 'true'
      
    - name: Set the release version (if applicable)
      run: |
        echo "TAGGED_VERSION=${{ steps.version.outputs.full_without_prefix }}" >> $GITHUB_ENV
        echo Set version to ${{ steps.version.outputs.full_without_prefix }}
      shell: bash
      if: steps.version.outputs.is_valid == 'true' && github.event_name == 'release'

    - name: Check .NET versions available to see if we can skip install
      shell: bash
      run: |
        echo "DOTNET_VERSION_LIST<<EOF" >> $GITHUB_ENV
        dotnet --list-sdks >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      
    - name: Setup .NET Core 3.1.x and 6.0.x
      uses: actions/setup-dotnet@v2
      if: contains(env.DOTNET_VERSION_LIST, '6.0.') == 'false' || contains(env.DOTNET_VERSION_LIST, '3.1.') == 'false'
      with:
        dotnet-version: |
          3.1.x
          6.0.x

    - run: dotnet clean --configuration Release
      if: github.event_name == 'release'
      
    - run: dotnet nuget locals all --clear
      if: github.event_name == 'release'
      
    - name: Restore packages
      run: dotnet restore
      
    - name: Build
      run: dotnet build -c Release
      
    - name: Test
      run: dotnet test -c Release --blame --no-build

    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: TestResults-${{matrix.os}}
        path: TestResults/
      
    - name: Pack
      run: dotnet pack -c Release --include-source

    - name: Publish nuget packages to Nuget.org (if a release)
      if: steps.version.outputs.is_valid == 'true' && github.event_name == 'release' && matrix.uploader
      run: |
        dotnet nuget push bin\Release\*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source nuget.org
