[imageflow_server] # must be valid TOML https://toml.io/en/ 
config_schema = 1 # Breaking changes in new versions may require this to be incremented

[license]
enforcement = "watermark" # or http_402_error/http_422_error, for fast failures
key = "[license key here]"

# ======  Caching to disk ======
[hybrid_cache]
enabled = true
# Don't put this on high-latency network storage, it will be slow
# Also cannot be inside an IIS website (unlike ImageResizer)
physical_path = 'D:\hybridcache'
cache_size_mb = 30_000           # Disk space usage limit in MB
write_queue_mb = 100             # How much RAM to permit for async writes
seconds_until_evictable = 10     # New entries are invulnerable to eviction for this long after creation

# The number of shards to split the metabase into (default: 8)
# More shards = more open write-ahead-log files, slower shutdown,
# but less lock contention and faster cache hits
database_shards = 8 # Manually delete the cache dir if you change this


# ======  Diagnostics access ======
# Prefix keys with 'production.', 'staging.', or 'development.' 
# to merge with the appropriate section based on the current environment
# Defaults to 'production' if DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT are not set
[diagnostics]
# Access anywhere with /imageflow.debug?password=[[redacted]]
allow_with_password = "[[redacted]]"
# Allow localhost without a password
allow_localhost = true

# In development mode, allow any host without a password
[development.diagnostics]
allow_anyhost = true


# ======  ASP.NET Server settings ======
[development.aspnet_server]
use_developer_exception_page = true # Error details in dev please
use_hsts = false                    # Don't ban unencrypted HTTP in development
use_https_redirection = false       # Or redirect to HTTPS

# Use secure defaults, require SSL everywhere else
[aspnet_server]
use_developer_exception_page = false # Don't leak error details to the public
use_exception_handler = "/error"     # Use a custom error page (defined below)
use_hsts = true                      # Allow no HTTP connections whatsoever
use_https_redirection = true         # Redirect all HTTP requests to HTTPS, if any get through

# You can specify rewrites in apache or IIS style rules
# either inline with 'text' or in a separate file with 'path'
[aspnet_server.apache_mod_rewrite]
text = """
"""
[aspnet_server.iis_url_rewrite]
path = "${app.content_root}\\iis_rewrite.config"


# NB: Don't forget [[vars]], [[sources]], [[routes]], [[watermarks]] and [[presets]] are arrays and use two bracket [[]] pairs.


# ======  Define Variables ======
# Variable interpolation is supported in 'strings ${vars.A}' and "strings ${vars.B}" 
# Use single-quote strings like 'this\for\paths' or "\\escape\\backslashes\\like\\this"
# """Triple-quoted strings can span multiple lines""", good for license keys & response bodies
# Set secret=false to allow the value to be displayed in the diagnostics page
# Env vars will automatically be redacted, unless you redefine them with secret=false 

[[vars]]
name = "home"                                # Var names are case-sensitive
value = "${env.HOME}"                        # ${env.NAME} will inject the given env var
fallback = "${env.HOMEDRIVE}${env.HOMEPATH}" # Used if value is empty or has undefined variables
folder_must_exist = true                     # Throw an error if the variable value isn't a folder that exists on disk
secret = false                               # Otherwise it will be redacted

[[vars]]
name = "app_root"
value = "${app.content_root}" # The hosting app can provide vars too, like the app deployment root
secret = false

[[vars]]
name = "config"
value = "${vars.app_root}\\file.toml" # Vars can reference other vars 
file_must_exist = true                # Throw error if the file doesn't exist
secret = false

[[vars]]
name = "ImageRoot"
value = 'C:\Images'
folder_must_exist = true
secret = false

[[vars]]
name = "CacheDrive"
value = 'D:\'
folder_must_exist = true
secret = false

[[vars]]
name = "AzureBlobConnection"
value = '[[connection string]]'
secret = true

[[vars]]
name = "S3AccessID"
value = '[[redacted]]'
secret = true

[[vars]]
name = "S3AccessKey"
value = '[[redacted]]'
secret = true

[[vars]]
name = "ImageCache"
value = '${vars.CacheDrive}\ImageflowCache'
secret = false

# ======  Define Presets ?preset=name ======
[[presets]]
name = "large"
apply_override_commands = "width=1200&height=1200&mode=max"

[[presets]]
name = "medium"
apply_default_commands = "width=800&height=800&mode=max"

# ======  Define Image Sources ======
[[sources]]
name = "fs"
[sources.filesystem]
fix_slashes = true
slash = "/"
root = "${vars.ImageRoot}"

[[sources]]
name = "s3-east"
[sources.s3]
region = "us-east-1"
endpoint = "https://s3.amazonaws.com"
access_key_id = "${vars.S3AccessID}"
access_key_secret = "${vars.S3AccessKey}"


[[sources]]
name = "client1"
[sources.http_client]
max_redirections = 6 # Max redirects to follow (0 to prevent redirections)
max_connections = 16 # Max simultaneous connections to the same host - increase unless you hit problems
max_retries = 3 # Max retries per request w/ jitter ttps://github.com/App-vNext/Polly/wiki/Retry-with-jitter
initial_retry_ms = 100 # Initial retry delay in milliseconds
require_https = true # Require HTTPS for all requests (TODO: implement)
# TODO - also implement a timeout, and a max response size, and magic byte verification
# TODO - also allow allowlisting domains
request_headers = [
    # { name = "Accept-Encoding", value = "gzip, deflate, br" },
    { name = "User-Agent", value = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36" },
    #{ name = "Accept", value = "image/webp,image/apng,*/*;q=0.8"}
    { name = "Authorization", value = "image/webp,image/apng,*/*;q=0.8" },
]

[[sources]]
name="remote-signed"
[sources.remote_reader_signed]
http_client="client1"
# Signing keys are case-sensitive - and different from full URL signing
# Using a secret key, you can ensure that only specific URLs can be requested
signing_keys = [
    "${signing_key_1}",
    "signing_key_2",
] 

[[sources]]
name = "azure"
[sources.azure_blob]
connection_string = "${AzureBlobConnection}"


# ======  Define Routes ======
[route_defaults]
prefix_case_sensitive = true
lowercase_path_remainder = false
allow_extensionless_urls = false
cache_control_string = "public, max-age=2592000"
apply_default_commands = "quality=76&webp.quality=70&f.sharpen=23&down.filter=mitchell"
apply_override_commands = ""
# Require a signature for all requests to this route
require_signature = "never"


# /images/ goes to the filesystem
[[routes]]
prefix = "/images/"
prefix_case_sensitive = true
lowercase_path_remainder = true
source.name = "fs"
source.path = "products"
cache_control_string = "public, max-age=2592000"                                        # TODO, implement by route
apply_default_commands = "quality=76&webp.quality=70&f.sharpen=23&down.filter=mitchell" # TODO, implement by route
require_signature = "with_commands"


[[routes]]
route = "/test-images/"
source.name = "s3-east"
source.container = "test-images"
source.path = "images"
apply_override_commands = "watermark=logo"
require_signature = "always"


[[routes]]
route = "/remote/"
source.name = "http"


[[static_response]]
for = "/"
content_type = "text/html"
content = """<img src="fire-umbrella-small.jpg?width=450" />"""
status_code = 200
respone_headers = [
    { name = "Cache-Control", value = "public, max-age=2592000" },
]

[[static_response]]
for = "/error"
content_type = "text/html"
content = '<p>An error has occurred while processing the request.</p>'
status_code = 500


[[watermarks]]
name = "logo"
virtual_path = "/images/logo.png"
opacity = 1.0
align_x_percent = 100.0
align_y_percent = 100.0
# Don't show watermarks on images < this size
min_canvas_width = 0                                                                    
min_canvas_height = 0
# fit, within (downscale only), fit_crop, within_crop, distort
fit_mode = "fit"                                                                        
fit_box_percent = { relative_to = "image", x1 = 0.0, y1 = 0.0, x2 = 100.0, y2 = 100.0 }
sharpen_percent = 12
up_filter = "lanczos3"
down_filter = "mitchell"

[[watermarks]]
name = "promo"
virtual_path = "/images/promo.png"
opacity = 1.0
align_x_percent = 0.0
align_y_percent = 0.0
min_canvas_width = 0                                                                  
min_canvas_height = 0
fit_mode = "within"                                                       
sharpen_percent = 22
up_filter = "lanczos3"
down_filter = "mitchell"
fit_box_margins = { relative_to = "canvas", left = 0, top = 0, right = 0, bottom = 0 }


[security]
only_permit_presets = false # true = Don't allow use of arbitrary commands, only ?preset=name


[security.max_decode_resolution]
width = 8000
height = 8000
megapixels = 40

[security.max_encode_resolution]
width = 8000
height = 8000
megapixels = 20

[security.max_frame_resolution]
width = 8000
height = 8000
megapixels = 40
