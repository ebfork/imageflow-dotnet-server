#nullable enable
Imazen.HybridCache.AsyncCacheOptions
Imazen.HybridCache.AsyncCacheOptions.AsyncCacheOptions() -> void
Imazen.HybridCache.AsyncCacheOptions.FailRequestsOnEnqueueLockTimeout.get -> bool
Imazen.HybridCache.AsyncCacheOptions.FailRequestsOnEnqueueLockTimeout.set -> void
Imazen.HybridCache.AsyncCacheOptions.MaxQueuedBytes.get -> long
Imazen.HybridCache.AsyncCacheOptions.MaxQueuedBytes.set -> void
Imazen.HybridCache.AsyncCacheOptions.MoveFilesIntoPlace.get -> bool
Imazen.HybridCache.AsyncCacheOptions.MoveFilesIntoPlace.set -> void
Imazen.HybridCache.AsyncCacheOptions.WaitForIdenticalDiskWritesMs.get -> int
Imazen.HybridCache.AsyncCacheOptions.WaitForIdenticalDiskWritesMs.set -> void
Imazen.HybridCache.AsyncCacheOptions.WaitForIdenticalRequestsTimeoutMs.get -> int
Imazen.HybridCache.AsyncCacheOptions.WaitForIdenticalRequestsTimeoutMs.set -> void
Imazen.HybridCache.AsyncCacheOptions.WriteSynchronouslyWhenQueueFull.get -> bool
Imazen.HybridCache.AsyncCacheOptions.WriteSynchronouslyWhenQueueFull.set -> void
Imazen.HybridCache.CleanupManagerOptions
Imazen.HybridCache.CleanupManagerOptions.AccessTrackingBits.get -> int
Imazen.HybridCache.CleanupManagerOptions.AccessTrackingBits.set -> void
Imazen.HybridCache.CleanupManagerOptions.CleanupManagerOptions() -> void
Imazen.HybridCache.CleanupManagerOptions.CleanupSelectBatchSize.get -> int
Imazen.HybridCache.CleanupManagerOptions.CleanupSelectBatchSize.set -> void
Imazen.HybridCache.CleanupManagerOptions.MaxCacheBytes.get -> long
Imazen.HybridCache.CleanupManagerOptions.MaxCacheBytes.set -> void
Imazen.HybridCache.CleanupManagerOptions.MinAgeToDelete.get -> System.TimeSpan
Imazen.HybridCache.CleanupManagerOptions.MinAgeToDelete.set -> void
Imazen.HybridCache.CleanupManagerOptions.MinCleanupBytes.get -> long
Imazen.HybridCache.CleanupManagerOptions.MinCleanupBytes.set -> void
Imazen.HybridCache.CleanupManagerOptions.RetryDeletionAfter.get -> System.TimeSpan
Imazen.HybridCache.CleanupManagerOptions.RetryDeletionAfter.set -> void
Imazen.HybridCache.HashBasedPathBuilder
Imazen.HybridCache.HashBasedPathBuilder.GetDirectoryEntriesBytesTotal() -> long
Imazen.HybridCache.HashBasedPathBuilder.SubfolderBits.get -> int
Imazen.HybridCache.HybridCache
Imazen.HybridCache.HybridCacheOptions
Imazen.HybridCache.HybridCacheOptions.Subfolders.get -> int
Imazen.HybridCache.HybridCacheOptions.Subfolders.set -> void
Imazen.HybridCache.ICacheDatabase
Imazen.HybridCache.ICacheDatabase.EstimateRecordDiskSpace(int stringLength) -> int
Imazen.HybridCache.ICacheDatabase.GetShardCount() -> int
Imazen.HybridCache.ICacheDatabaseRecord
Imazen.HybridCache.ICacheDatabaseRecord.AccessCountKey.get -> int
Imazen.HybridCache.ICacheDatabaseRecord.CreatedAt.get -> System.DateTime
Imazen.HybridCache.ICacheDatabaseRecord.DiskSize.get -> long
Imazen.HybridCache.ICacheDatabaseRecord.LastDeletionAttempt.get -> System.DateTime
Imazen.HybridCache.MetaStore.MetaStore
Imazen.HybridCache.MetaStore.MetaStore.EstimateRecordDiskSpace(int stringLength) -> int
Imazen.HybridCache.MetaStore.MetaStore.GetShardCount() -> int
Imazen.HybridCache.MetaStore.MetaStoreOptions
Imazen.HybridCache.MetaStore.MetaStoreOptions.MaxLogFilesPerShard.get -> int
Imazen.HybridCache.MetaStore.MetaStoreOptions.MaxLogFilesPerShard.set -> void
Imazen.HybridCache.MetaStore.MetaStoreOptions.Shards.get -> int
Imazen.HybridCache.MetaStore.MetaStoreOptions.Shards.set -> void
~Imazen.HybridCache.AsyncCacheOptions.MoveFileOverwriteFunc.get -> System.Action<string, string>
~Imazen.HybridCache.AsyncCacheOptions.MoveFileOverwriteFunc.set -> void
~Imazen.HybridCache.CleanupManagerOptions.MoveFileOverwriteFunc.get -> System.Action<string, string>
~Imazen.HybridCache.CleanupManagerOptions.MoveFileOverwriteFunc.set -> void
~Imazen.HybridCache.HashBasedPathBuilder.GetDisplayPathForKeyBasis(byte[] keyBasis) -> string
~Imazen.HybridCache.HashBasedPathBuilder.GetHashFromString(string hashString) -> byte[]
~Imazen.HybridCache.HashBasedPathBuilder.GetPhysicalPathFromHash(byte[] hash) -> string
~Imazen.HybridCache.HashBasedPathBuilder.GetPhysicalPathFromRelativePath(string relativePath) -> string
~Imazen.HybridCache.HashBasedPathBuilder.GetRelativePathFromHash(byte[] hash) -> string
~Imazen.HybridCache.HashBasedPathBuilder.GetStringFromHash(byte[] hash) -> string
~Imazen.HybridCache.HashBasedPathBuilder.HashBasedPathBuilder(string physicalCacheDir, int subfolders, char relativeDirSeparator, string fileExtension) -> void
~Imazen.HybridCache.HashBasedPathBuilder.HashKeyBasis(byte[] keyBasis) -> byte[]
~Imazen.HybridCache.HybridCache.AwaitEnqueuedTasks() -> System.Threading.Tasks.Task
~Imazen.HybridCache.HybridCache.GetIssues() -> System.Collections.Generic.IEnumerable<Imazen.Common.Issues.IIssue>
~Imazen.HybridCache.HybridCache.GetOrCreateBytes(byte[] key, Imazen.Common.Extensibility.StreamCache.AsyncBytesResult dataProviderCallback, System.Threading.CancellationToken cancellationToken, bool retrieveContentType) -> System.Threading.Tasks.Task<Imazen.Common.Extensibility.StreamCache.IStreamCacheResult>
~Imazen.HybridCache.HybridCache.HybridCache(Imazen.HybridCache.ICacheDatabase cacheDatabase, Imazen.HybridCache.HybridCacheOptions options, Microsoft.Extensions.Logging.ILogger logger) -> void
~Imazen.HybridCache.HybridCache.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Imazen.HybridCache.HybridCache.StopAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Imazen.HybridCache.HybridCacheOptions.AsyncCacheOptions.get -> Imazen.HybridCache.AsyncCacheOptions
~Imazen.HybridCache.HybridCacheOptions.AsyncCacheOptions.set -> void
~Imazen.HybridCache.HybridCacheOptions.CleanupManagerOptions.get -> Imazen.HybridCache.CleanupManagerOptions
~Imazen.HybridCache.HybridCacheOptions.CleanupManagerOptions.set -> void
~Imazen.HybridCache.HybridCacheOptions.HybridCacheOptions(string physicalCacheDir) -> void
~Imazen.HybridCache.HybridCacheOptions.PhysicalCacheDir.get -> string
~Imazen.HybridCache.HybridCacheOptions.PhysicalCacheDir.set -> void
~Imazen.HybridCache.ICacheDatabase.CreateRecordIfSpace(int shard, string relativePath, string contentType, long recordDiskSpace, System.DateTime createdDate, int accessCountKey, long diskSpaceLimit) -> System.Threading.Tasks.Task<bool>
~Imazen.HybridCache.ICacheDatabase.DeleteRecord(int shard, Imazen.HybridCache.ICacheDatabaseRecord record) -> System.Threading.Tasks.Task
~Imazen.HybridCache.ICacheDatabase.GetContentType(int shard, string relativePath) -> System.Threading.Tasks.Task<string>
~Imazen.HybridCache.ICacheDatabase.GetDeletionCandidates(int shard, System.DateTime maxLastDeletionAttemptTime, System.DateTime maxCreatedDate, int count, System.Func<int, ushort> getUsageCount) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Imazen.HybridCache.ICacheDatabaseRecord>>
~Imazen.HybridCache.ICacheDatabase.GetRecord(int shard, string relativePath) -> System.Threading.Tasks.Task<Imazen.HybridCache.ICacheDatabaseRecord>
~Imazen.HybridCache.ICacheDatabase.GetShardForKey(string key) -> int
~Imazen.HybridCache.ICacheDatabase.GetShardSize(int shard) -> System.Threading.Tasks.Task<long>
~Imazen.HybridCache.ICacheDatabase.ReplaceRelativePathAndUpdateLastDeletion(int shard, Imazen.HybridCache.ICacheDatabaseRecord record, string movedRelativePath, System.DateTime lastDeletionAttempt) -> System.Threading.Tasks.Task
~Imazen.HybridCache.ICacheDatabase.UpdateCreatedDateAtomic(int shard, string relativePath, string contentType, long recordDiskSpace, System.DateTime createdDate, int accessCountKey) -> System.Threading.Tasks.Task
~Imazen.HybridCache.ICacheDatabase.UpdateLastDeletionAttempt(int shard, string relativePath, System.DateTime when) -> System.Threading.Tasks.Task
~Imazen.HybridCache.ICacheDatabaseRecord.ContentType.get -> string
~Imazen.HybridCache.ICacheDatabaseRecord.RelativePath.get -> string
~Imazen.HybridCache.MetaStore.MetaStore.CreateRecordIfSpace(int shard, string relativePath, string contentType, long recordDiskSpace, System.DateTime createdDate, int accessCountKey, long diskSpaceLimit) -> System.Threading.Tasks.Task<bool>
~Imazen.HybridCache.MetaStore.MetaStore.DeleteRecord(int shard, Imazen.HybridCache.ICacheDatabaseRecord record) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStore.GetContentType(int shard, string relativePath) -> System.Threading.Tasks.Task<string>
~Imazen.HybridCache.MetaStore.MetaStore.GetDeletionCandidates(int shard, System.DateTime maxLastDeletionAttemptTime, System.DateTime maxCreatedDate, int count, System.Func<int, ushort> getUsageCount) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Imazen.HybridCache.ICacheDatabaseRecord>>
~Imazen.HybridCache.MetaStore.MetaStore.GetRecord(int shard, string relativePath) -> System.Threading.Tasks.Task<Imazen.HybridCache.ICacheDatabaseRecord>
~Imazen.HybridCache.MetaStore.MetaStore.GetShardForKey(string key) -> int
~Imazen.HybridCache.MetaStore.MetaStore.GetShardSize(int shard) -> System.Threading.Tasks.Task<long>
~Imazen.HybridCache.MetaStore.MetaStore.MetaStore(Imazen.HybridCache.MetaStore.MetaStoreOptions options, Imazen.HybridCache.HybridCacheOptions cacheOptions, Microsoft.Extensions.Logging.ILogger logger) -> void
~Imazen.HybridCache.MetaStore.MetaStore.ReplaceRelativePathAndUpdateLastDeletion(int shard, Imazen.HybridCache.ICacheDatabaseRecord record, string movedRelativePath, System.DateTime lastDeletionAttempt) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStore.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStore.StopAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStore.UpdateCreatedDateAtomic(int shard, string relativePath, string contentType, long recordDiskSpace, System.DateTime createdDate, int accessCountKey) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStore.UpdateLastDeletionAttempt(int shard, string relativePath, System.DateTime when) -> System.Threading.Tasks.Task
~Imazen.HybridCache.MetaStore.MetaStoreOptions.DatabaseDir.get -> string
~Imazen.HybridCache.MetaStore.MetaStoreOptions.DatabaseDir.set -> void
~Imazen.HybridCache.MetaStore.MetaStoreOptions.MetaStoreOptions(string databaseDir) -> void